import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, Modal, TouchableOpacity, ActivityIndicator, TextInput, Keyboard, ScrollView, KeyboardAvoidingView, Platform, BackHandler, Alert } from 'react-native';
import { Button, Card, FAB } from 'react-native-paper';
import { Stack, useRouter } from 'expo-router';
import { supabase } from '../supabaseClient';
import * as FileSystem from 'expo-file-system';
import * as Sharing from 'expo-sharing';

export default function AccueilAdministrateur() {
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [feedback, setFeedback] = useState('');
  const [modalVisible, setModalVisible] = useState(false);
  const [modalType, setModalType] = useState('');
  const [formData, setFormData] = useState({
    nom: '',
    email: '',
    subject: '',
    classe: '',
    school_id: '',
    parent_email: ''
  });
  const [lastGeneratedPassword, setLastGeneratedPassword] = useState('');
  const [lastUserInfo, setLastUserInfo] = useState(null);
  const [lastUpdate, setLastUpdate] = useState(new Date());

  // --- √âTAPE 2 : States pour stocker les listes d'utilisateurs ---
  const [profs, setProfs] = useState([]);
  const [students, setStudents] = useState([]);
  const [parents, setParents] = useState([]);

  // --- Charger les utilisateurs au chargement de la page ---
  useEffect(() => {
    loadUsers();
    // D√©clencher un chargement automatique toutes les 30 secondes
    const interval = setInterval(() => {
      loadUsers();
    }, 30000);
    
    // Nettoyage de l'intervalle
    return () => clearInterval(interval);
  }, []);

  // Calculer le total d'utilisateurs pour le tableau de bord
  const totalUsers = profs.length + students.length + parents.length;

  // Fonction pour charger toutes les listes depuis Supabase
  const loadUsers = async () => {
    setLoading(true);
    try {
      const { data: profsData } = await supabase.from('profs').select('*').order('nom');
      const { data: studentsData } = await supabase.from('students').select('*').order('nom');
      const { data: parentsData } = await supabase.from('parents').select('*').order('nom');
      setProfs(profsData || []);
      setStudents(studentsData || []);
      setParents(parentsData || []);
      setLastUpdate(new Date());
    } catch (err) {
      setFeedback('Erreur lors du chargement des utilisateurs');
    }
    setLoading(false);
  };

  // --- Fonction de suppression d'utilisateur avec confirmation ---
  const handleDeleteUser = async (type, id, nom) => {
    Alert.alert(
      'Confirmation',
      `Supprimer ${nom} ?`,
      [
        { text: 'Annuler', style: 'cancel' },
        {
          text: 'Supprimer', style: 'destructive',
          onPress: async () => {
            setLoading(true);
            try {
              const { error } = await supabase.from(type).delete().eq('id', id);
              if (error) {
                setFeedback('Erreur lors de la suppression');
              } else {
                setFeedback('Utilisateur supprim√©');
                loadUsers();
              }
            } catch (err) {
              setFeedback('Erreur inattendue');
            }
            setLoading(false);
            setTimeout(() => setFeedback(''), 3000);
          }
        }
      ]
    );
  };

  // G√©n√®re un mot de passe al√©atoire
  const generatePassword = () => {
    const length = 8;
    const charset = 'abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ123456789';
    let password = '';
    for (let i = 0; i < length; i++) {
      const randomIndex = Math.floor(Math.random() * charset.length);
      password += charset[randomIndex];
    }
    return password;
  };

  // Valider le format de l'email
  const isValidEmail = (email) => {
    const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;
    return emailPattern.test(email);
  };

  // Convertir les emails probl√©matiques (ex: @ecole.com)
  const convertToValidEmail = (email) => {
    // Liste des domaines √† convertir
    const domainsToConvert = ['@ecole.com'];
    const validDomain = '@gmail.com';
    
    for (const domain of domainsToConvert) {
      if (email.endsWith(domain)) {
        return email.replace(domain, validDomain);
      }
    }
    
    return email;
  };

  // G√©n√®re un fichier texte avec les identifiants
  const generateCredentialsFile = async (userInfo) => {
    try {
      const content = `Identifiants de connexion\n\n` +
        `Nom: ${userInfo.nom}\n` +
        `Email: ${userInfo.email}\n` +
        `Mot de passe: ${userInfo.password}\n`;
      
      // Cr√©er le fichier temporaire
      const fileUri = `${FileSystem.documentDirectory}identifiants.txt`;
      await FileSystem.writeAsStringAsync(fileUri, content);
      
      // Partager le fichier
      await Sharing.shareAsync(fileUri, {
        mimeType: 'text/plain',
        dialogTitle: 'Enregistrer les identifiants'
      });
      
      return true;
    } catch (error) {
      console.error("Erreur lors de la g√©n√©ration du fichier:", error);
      return false;
    }
  };

  // Fonction pour ajouter un professeur (version qui marche)
  // Fonction unifi√©e qui appelle la bonne fonction selon le type
  const handleAddUser = async () => {
    if (modalType === 'add_prof') {
      await handleAddProf();
    } else if (modalType === 'add_student') {
      await handleAddStudent();
    } else if (modalType === 'add_parent') {
      await handleAddParent();
    }
  };

  const handleAddProf = async () => {
  if (!formData.nom || !formData.email || !formData.subject || !formData.school_id) {
    setFeedback('Tous les champs sont obligatoires pour un professeur');
    setTimeout(() => setFeedback(''), 3000);
    return;
  }

  // Validation et conversion automatique de l'email
  if (!isValidEmail(formData.email)) {
    setFeedback('Format d\'email invalide. Utilisez: nom@gmail.com, nom@test.fr, etc.');
    setTimeout(() => setFeedback(''), 3000);
    return;
  }

  // Auto-conversion des domaines probl√©matiques
  const originalEmail = formData.email;
  const validEmail = convertToValidEmail(formData.email);
  
  if (originalEmail !== validEmail) {
    setFeedback(`Email converti automatiquement: ${originalEmail} ‚Üí ${validEmail}`);
    setTimeout(() => setFeedback(''), 5000);
  }

  setLoading(true);
  try {
    const temporaryPassword = generatePassword();
    
    console.log('Cr√©ation professeur:', {
      email: validEmail,
      password: temporaryPassword,
      originalEmail: originalEmail
    });
    
    // Cr√©er l'utilisateur dans Supabase Auth
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email: validEmail,
      password: temporaryPassword,
      options: {
        emailRedirectTo: undefined,
        data: {
          user_type: 'professor',
          name: formData.nom
        }
      }
    });

    console.log('R√©sultat cr√©ation Auth:', { authData, authError });

    if (authError) {
      console.log('Erreur cr√©ation utilisateur Auth:', authError);
      setFeedback('Erreur lors de la cr√©ation du compte : ' + authError.message);
      setLoading(false);
      setTimeout(() => setFeedback(''), 3000);
      return;
    }

    // Ins√©rer dans la table profs
    const insertData = {
      nom: formData.nom,
      email: validEmail,
      user_id: authData.user?.id,
      subject: formData.subject,
      classe: formData.classe,
      school_id: formData.school_id
    };

    const { error } = await supabase.from('profs').insert(insertData);

    if (error) {
      console.log('Erreur ajout professeur:', error);
      setFeedback('Erreur lors de l\'ajout : ' + error.message);
    } else {
      setLastGeneratedPassword(temporaryPassword);
      
      // Pr√©parer les informations pour le fichier
      const userInfo = {
        nom: formData.nom,
        email: validEmail,
        password: temporaryPassword,
        subject: formData.subject,
        classe: formData.classe,
        school_id: formData.school_id
      };

      setLastUserInfo(userInfo);

      // G√©n√©rer le fichier d'identifiants automatiquement
      const fileGenerated = await generateCredentialsFile(userInfo);
      
      if (fileGenerated) {
        setFeedback(`‚úÖ Professeur ajout√© avec succ√®s !\nüìÑ Fichier d'identifiants g√©n√©r√© et partag√©\nüîë Mot de passe: ${temporaryPassword}`);
      } else {
        setFeedback(`‚úÖ Professeur ajout√© avec succ√®s !\nüìß Email: ${validEmail}\nüîë Mot de passe: ${temporaryPassword}`);
      }
      
      closeModal();
      loadUsers();
    }
  } catch (err) {
    console.log('Erreur:', err);
    setFeedback('Erreur inattendue');
  }

  setLoading(false);
  setTimeout(() => setFeedback(''), 10000);
};

// Fonction pour ajouter un √©tudiant (bas√©e sur la logique prof qui fonctionne)
const handleAddStudent = async () => {
  if (!formData.nom || !formData.email || !formData.classe || !formData.school_id) {
    setFeedback('Nom, email, classe et identifiant sont obligatoires pour un √©l√®ve');
    setTimeout(() => setFeedback(''), 3000);
    return;
  }

  // Validation et conversion automatique de l'email
  if (!isValidEmail(formData.email)) {
    setFeedback('Format d\'email invalide. Utilisez: nom@gmail.com, nom@test.fr, etc.');
    setTimeout(() => setFeedback(''), 3000);
    return;
  }

  const originalEmail = formData.email;
  const validEmail = convertToValidEmail(formData.email);
  
  if (originalEmail !== validEmail) {
    setFeedback(`Email converti automatiquement: ${originalEmail} ‚Üí ${validEmail}`);
    setTimeout(() => setFeedback(''), 5000);
  }

  setLoading(true);
  try {
    const temporaryPassword = generatePassword();
    
    // Cr√©er l'utilisateur dans Supabase Auth
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email: validEmail,
      password: temporaryPassword,
      options: {
        emailRedirectTo: undefined,
        data: {
          user_type: 'student',
          name: formData.nom
        }
      }
    });

    if (authError) {
      console.log('Erreur cr√©ation utilisateur Auth:', authError);
      setFeedback('Erreur lors de la cr√©ation du compte : ' + authError.message);
      setLoading(false);
      setTimeout(() => setFeedback(''), 3000);
      return;
    }

    // Ins√©rer dans la table students
    const insertData = {
      nom: formData.nom,
      email: validEmail,
      user_id: authData.user?.id,
      classe: formData.classe,
      school_id: formData.school_id,
      parent_email: formData.parent_email
    };

    const { error } = await supabase.from('students').insert(insertData);

    if (error) {
      console.log('Erreur ajout √©tudiant:', error);
      setFeedback('Erreur lors de l\'ajout : ' + error.message);
    } else {
      setLastGeneratedPassword(temporaryPassword);
      
      // Pr√©parer les informations pour le fichier
      const userInfo = {
        nom: formData.nom,
        email: validEmail,
        password: temporaryPassword,
        classe: formData.classe,
        school_id: formData.school_id
      };

      setLastUserInfo(userInfo);

      // G√©n√©rer le fichier d'identifiants automatiquement
      const fileGenerated = await generateCredentialsFile(userInfo);
      
      if (fileGenerated) {
        setFeedback(`‚úÖ √âl√®ve ajout√© avec succ√®s !\nüìÑ Fichier d'identifiants g√©n√©r√© et partag√©\nüîë Mot de passe: ${temporaryPassword}`);
      } else {
        setFeedback(`‚úÖ √âl√®ve ajout√© avec succ√®s !\nüìß Email: ${validEmail}\nüîë Mot de passe: ${temporaryPassword}`);
      }
      
      // R√©initialiser le formulaire et fermer le modal
      setFormData({
        nom: '',
        email: '',
        subject: '',
        classe: '',
        school_id: '',
        parent_email: ''
      });
      setModalVisible(false);
    }
  } catch (err) {
    console.log('Erreur:', err);
    setFeedback('Erreur inattendue');
  }

  setLoading(false);
  setTimeout(() => setFeedback(''), 10000);
};

// Fonction pour ajouter un parent (bas√©e sur la logique prof qui fonctionne)
const handleAddParent = async () => {
  if (!formData.nom || !formData.email) {
    setFeedback('Nom et email sont obligatoires pour un parent');
    setTimeout(() => setFeedback(''), 3000);
    return;
  }

  // Validation et conversion automatique de l'email
  if (!isValidEmail(formData.email)) {
    setFeedback('Format d\'email invalide. Utilisez: nom@gmail.com, nom@test.fr, etc.');
    setTimeout(() => setFeedback(''), 3000);
    return;
  }

  const originalEmail = formData.email;
  const validEmail = convertToValidEmail(formData.email);
  
  if (originalEmail !== validEmail) {
    setFeedback(`Email converti automatiquement: ${originalEmail} ‚Üí ${validEmail}`);
    setTimeout(() => setFeedback(''), 5000);
  }

  setLoading(true);
  try {
    const temporaryPassword = generatePassword();
    
    // Cr√©er l'utilisateur dans Supabase Auth
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email: validEmail,
      password: temporaryPassword,
      options: {
        emailRedirectTo: undefined,
        data: {
          user_type: 'parent',
          name: formData.nom
        }
      }
    });

    if (authError) {
      console.log('Erreur cr√©ation utilisateur Auth:', authError);
      setFeedback('Erreur lors de la cr√©ation du compte : ' + authError.message);
      setLoading(false);
      setTimeout(() => setFeedback(''), 3000);
      return;
    }

    // Ins√©rer dans la table parents
    const insertData = {
      nom: formData.nom,
      email: validEmail,
      user_id: authData.user?.id
    };

    const { error } = await supabase.from('parents').insert(insertData);

    if (error) {
      console.log('Erreur ajout parent:', error);
      setFeedback('Erreur lors de l\'ajout : ' + error.message);
    } else {
      setLastGeneratedPassword(temporaryPassword);
      
      // Pr√©parer les informations pour le fichier
      const userInfo = {
        nom: formData.nom,
        email: validEmail,
        password: temporaryPassword
      };

      setLastUserInfo(userInfo);

      // G√©n√©rer le fichier d'identifiants automatiquement
      const fileGenerated = await generateCredentialsFile(userInfo);
      
      if (fileGenerated) {
        setFeedback(`‚úÖ Parent ajout√© avec succ√®s !\nüìÑ Fichier d'identifiants g√©n√©r√© et partag√©\nüîë Mot de passe: ${temporaryPassword}`);
      } else {
        setFeedback(`‚úÖ Parent ajout√© avec succ√®s !\nüìß Email: ${validEmail}\nüîë Mot de passe: ${temporaryPassword}`);
      }
      
      // R√©initialiser le formulaire et fermer le modal
      setFormData({
        nom: '',
        email: '',
        subject: '',
        classe: '',
        school_id: '',
        parent_email: ''
      });
      setModalVisible(false);
    }
  } catch (err) {
    console.log('Erreur:', err);
    setFeedback('Erreur inattendue');
  }

  setLoading(false);
  setTimeout(() => setFeedback(''), 10000);
};

  // Fonction pour fermer le modal
  const closeModal = () => {
    setModalVisible(false);
    setFormData({
      nom: '',
      email: '',
      subject: '',
      classe: '',
      school_id: '',
      parent_email: ''
    });
  };

  return (
    <>
      <Stack.Screen options={{ headerShown: false }} />
      <View style={styles.container}>
        {/* Header moderne th√®me administrateur */}
        <View style={styles.header}>
          <View style={styles.headerContent}>
            <Text style={styles.headerIcon}>üè´</Text>
            <View style={styles.headerText}>
              <Text style={styles.headerTitle}>Administration</Text>
              <Text style={styles.headerSubtitle}>
                Gestion des utilisateurs | {totalUsers} utilisateurs
              </Text>
            </View>
            {loading && (
              <ActivityIndicator size="small" color="white" style={{ marginLeft: 10 }} />
            )}
          </View>
          
          {/* Feedback visuel */}
          {feedback ? (
            <View style={styles.headerFeedback}>
              <Text style={styles.feedbackText}>{feedback}</Text>
            </View>
          ) : null}
        </View>


        <ScrollView style={styles.scrollContainer}>
          {/* Section Statistiques (Dashboard) */}
          <View style={styles.dashboardSection}>
            <View style={styles.statsContainer}>
              <View style={[styles.statCard, styles.statCardProf]}>
                <View style={styles.statIconContainer}>
                  <Text style={styles.statIcon}>üéì</Text>
                </View>
                <View style={styles.statContent}>
                  <Text style={styles.statNumber}>{profs.length}</Text>
                  <Text style={styles.statLabel}>Professeurs</Text>
                </View>
              </View>
              
              <View style={[styles.statCard, styles.statCardStudent]}>
                <View style={styles.statIconContainer}>
                  <Text style={styles.statIcon}>üë®‚Äçüéì</Text>
                </View>
                <View style={styles.statContent}>
                  <Text style={styles.statNumber}>{students.length}</Text>
                  <Text style={styles.statLabel}>√âl√®ves</Text>
                </View>
              </View>
              
              <View style={[styles.statCard, styles.statCardParent]}>
                <View style={styles.statIconContainer}>
                  <Text style={styles.statIcon}>üë®‚Äçüë©‚Äçüëß‚Äçüë¶</Text>
                </View>
                <View style={styles.statContent}>
                  <Text style={styles.statNumber}>{parents.length}</Text>
                  <Text style={styles.statLabel}>Parents</Text>
                </View>
              </View>
            </View>
          </View>

          {/* Section Ajouter un utilisateur */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>
              <Text style={{ marginRight: 8 }}>‚ûï</Text>
              Ajouter un utilisateur
            </Text>
            <View style={styles.buttonGrid}>
              <TouchableOpacity 
                style={styles.addButton}
                onPress={() => {
                  setModalType('add_prof');
                  setModalVisible(true);
                }}
              >
                <Text style={styles.buttonIcon}>üéì</Text>
                <Text style={styles.buttonText}>Professeur</Text>
              </TouchableOpacity>
              <TouchableOpacity 
                style={[styles.addButton, styles.addButtonStudent]}
                onPress={() => {
                  setModalType('add_student');
                  setModalVisible(true);
                }}
              >
                <Text style={styles.buttonIcon}>üë®‚Äçüéì</Text>
                <Text style={styles.buttonText}>√âl√®ve</Text>
              </TouchableOpacity>
              <TouchableOpacity 
                style={[styles.addButton, styles.addButtonParent]}
                onPress={() => {
                  setModalType('add_parent');
                  setModalVisible(true);
                }}
              >
                <Text style={styles.buttonIcon}>üë®‚Äçüë©‚Äçüëß‚Äçüë¶</Text>
                <Text style={styles.buttonText}>Parent</Text>
              </TouchableOpacity>
            </View>
          </View>

          {/* --- Section Liste des Professeurs --- */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>
              <Text style={{ marginRight: 8 }}>üéì</Text>
              Professeurs
            </Text>
            {profs.length === 0 ? (
              <Text style={styles.emptyListText}>Aucun professeur enregistr√©</Text>
            ) : (
              profs.map((prof) => (
                <View key={prof.id} style={styles.userRow}>
                  <View style={styles.userInfo}>
                    <Text style={styles.userIcon}>üéì</Text>
                    <View style={styles.userDetails}>
                      <Text style={styles.userName}>{prof.nom}</Text>
                      <Text style={styles.userEmail}>{prof.email}</Text>
                      {prof.subject && <Text style={styles.userMeta}>Mati√®re: {prof.subject}</Text>}
                    </View>
                  </View>
                  <TouchableOpacity onPress={() => handleDeleteUser('profs', prof.id, prof.nom)} style={styles.deleteBtn}>
                    <Text style={{ fontSize: 14, color: 'white' }}>üóëÔ∏è</Text>
                    <Text style={styles.deleteBtnText}>Supprimer</Text>
                  </TouchableOpacity>
                </View>
              ))
            )}
          </View>

          {/* --- Section Liste des √âl√®ves --- */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>
              <Text style={{ marginRight: 8 }}>üë®‚Äçüéì</Text>
              √âl√®ves
            </Text>
            {students.length === 0 ? (
              <Text style={styles.emptyListText}>Aucun √©l√®ve enregistr√©</Text>
            ) : (
              students.map((student) => (
                <View key={student.id} style={styles.userRow}>
                  <View style={styles.userInfo}>
                    <Text style={styles.userIcon}>üë®‚Äçüéì</Text>
                    <View style={styles.userDetails}>
                      <Text style={styles.userName}>{student.nom}</Text>
                      <Text style={styles.userEmail}>{student.email}</Text>
                      {student.classe && <Text style={styles.userMeta}>Classe: {student.classe}</Text>}
                    </View>
                  </View>
                  <TouchableOpacity onPress={() => handleDeleteUser('students', student.id, student.nom)} style={styles.deleteBtn}>
                    <Text style={{ fontSize: 14, color: 'white' }}>üóëÔ∏è</Text>
                    <Text style={styles.deleteBtnText}>Supprimer</Text>
                  </TouchableOpacity>
                </View>
              ))
            )}
          </View>

          {/* --- Section Liste des Parents --- */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>
              <Text style={{ marginRight: 8 }}>üë®‚Äçüë©‚Äçüëß‚Äçüë¶</Text>
              Parents
            </Text>
            {parents.length === 0 ? (
              <Text style={styles.emptyListText}>Aucun parent enregistr√©</Text>
            ) : (
              parents.map((parent) => (
                <View key={parent.id} style={styles.userRow}>
                  <View style={styles.userInfo}>
                    <Text style={styles.userIcon}>üë®‚Äçüë©‚Äçüëß‚Äçüë¶</Text>
                    <View style={styles.userDetails}>
                      <Text style={styles.userName}>{parent.nom}</Text>
                      <Text style={styles.userEmail}>{parent.email}</Text>
                    </View>
                  </View>
                  <TouchableOpacity onPress={() => handleDeleteUser('parents', parent.id, parent.nom)} style={styles.deleteBtn}>
                    <Text style={{ fontSize: 14, color: 'white' }}>üóëÔ∏è</Text>
                    <Text style={styles.deleteBtnText}>Supprimer</Text>
                  </TouchableOpacity>
                </View>
              ))
            )}
          </View>
        </ScrollView>

        {/* Modal d'ajout d'utilisateur */}
        <Modal
          visible={modalVisible}
          transparent
          animationType="slide"
          onRequestClose={() => setModalVisible(false)}
        >
          <KeyboardAvoidingView 
            style={styles.keyboardAvoidingView}
            behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
            keyboardVerticalOffset={Platform.OS === 'ios' ? 0 : 20}
          >
            <View style={styles.modalOverlay}>
              <View style={styles.modalContent}>
                <Text style={styles.modalTitle}>
                  {modalType === 'add_prof' ? 'Ajouter un professeur' :
                   modalType === 'add_student' ? 'Ajouter un √©l√®ve' : 
                   'Ajouter un parent'}
                </Text>

                {/* Champs communs */}
                <TextInput
                  style={styles.input}
                  placeholder="Nom complet"
                  value={formData.nom}
                  onChangeText={(text) => setFormData({...formData, nom: text})}
                />

                <TextInput
                  style={styles.input}
                  placeholder="Email"
                  value={formData.email}
                  onChangeText={(text) => setFormData({...formData, email: text})}
                  keyboardType="email-address"
                  autoCapitalize="none"
                />

                {/* Champs sp√©cifiques professeur */}
                {modalType === 'add_prof' && (
                  <>
                    <TextInput
                      style={styles.input}
                      placeholder="Mati√®re enseign√©e"
                      value={formData.subject}
                      onChangeText={(text) => setFormData({...formData, subject: text})}
                    />
                    <TextInput
                      style={styles.input}
                      placeholder="Classes (s√©par√©es par des virgules)"
                      value={formData.classe}
                      onChangeText={(text) => setFormData({...formData, classe: text})}
                    />
                    <TextInput
                      style={styles.input}
                      placeholder="Identifiant d'√©cole"
                      value={formData.school_id}
                      onChangeText={(text) => setFormData({...formData, school_id: text})}
                    />
                  </>
                )}

                {/* Champs sp√©cifiques √©l√®ve */}
                {modalType === 'add_student' && (
                  <>
                    <TextInput
                      style={styles.input}
                      placeholder="Classe"
                      value={formData.classe}
                      onChangeText={(text) => setFormData({...formData, classe: text})}
                    />
                    <TextInput
                      style={styles.input}
                      placeholder="Email du parent"
                      value={formData.parent_email}
                      onChangeText={(text) => setFormData({...formData, parent_email: text})}
                      keyboardType="email-address"
                      autoCapitalize="none"
                    />
                    <TextInput
                      style={styles.input}
                      placeholder="Identifiant d'√©cole"
                      value={formData.school_id}
                      onChangeText={(text) => setFormData({...formData, school_id: text})}
                    />
                  </>
                )}

                {/* Champs sp√©cifiques parent - aucun champ suppl√©mentaire */}

                <View style={styles.modalButtons}>
                  <TouchableOpacity 
                    style={[styles.modalButton, { backgroundColor: '#9AA0A6' }]}
                    onPress={() => {
                      setModalVisible(false);
                      setFormData({
                        nom: '',
                        email: '',
                        subject: '',
                        classe: '',
                        school_id: '',
                        parent_email: ''
                      });
                    }}
                  >
                    <Text style={styles.modalButtonText}>Annuler</Text>
                  </TouchableOpacity>

                  <TouchableOpacity 
                    style={[styles.modalButton, { backgroundColor: '#4A6FFF' }]}
                    onPress={handleAddUser}
                    disabled={loading}
                  >
                    <Text style={styles.modalButtonText}>
                      {loading ? 'Ajout...' : 'Ajouter'}
                    </Text>
                  </TouchableOpacity>
                </View>

                {loading && (
                  <ActivityIndicator size="small" color="#4A6FFF" style={styles.loader} />
                )}
              </View>
            </View>
          </KeyboardAvoidingView>
        </Modal>
      </View>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F7FA',
  },
  
  // Header
  header: {
    backgroundColor: '#4A6FFF', // Couleur primaire plus profonde
    paddingTop: 50,
    paddingBottom: 25,
    paddingHorizontal: 24,
    borderBottomLeftRadius: 28,
    borderBottomRightRadius: 28,
    elevation: 8,
    shadowColor: '#4A6FFF',
    shadowOffset: { width: 0, height: 5 },
    shadowOpacity: 0.3,
    shadowRadius: 10,
  },
  
  headerContent: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  
  headerIcon: {
    fontSize: 38,
    marginRight: 16,
    textShadowColor: 'rgba(0,0,0,0.1)',
    textShadowOffset: { width: 1, height: 1 },
    textShadowRadius: 3,
  },
  
  headerText: {
    flex: 1,
  },
  
  headerTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    color: 'white',
    letterSpacing: 0.5,
  },
  
  headerSubtitle: {
    fontSize: 17,
    color: 'rgba(255, 255, 255, 0.95)',
    marginTop: 6,
    letterSpacing: 0.3,
  },
  
  headerFeedback: {
    backgroundColor: 'rgba(255, 255, 255, 0.15)',
    borderRadius: 12,
    padding: 12,
    marginTop: 16,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.25)',
  },
  
  feedbackText: {
    color: 'white',
    fontSize: 15,
    textAlign: 'center',
    lineHeight: 22,
    letterSpacing: 0.3,
  },
  
  // Contenu
  scrollContainer: {
    flex: 1,
    padding: 24,
  },
  
  // Dashboard stats
  dashboardSection: {
    marginBottom: 32,
  },
  
  statsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    flexWrap: 'wrap',
  },
  
  statCard: {
    width: '31%',
    backgroundColor: 'white',
    borderRadius: 16,
    padding: 16,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 8,
    elevation: 3,
    borderLeftWidth: 4,
    flexDirection: 'row',
    alignItems: 'center',
  },
  
  statCardProf: {
    borderLeftColor: '#4A6FFF',
  },
  
  statCardStudent: {
    borderLeftColor: '#00C853',
  },
  
  statCardParent: {
    borderLeftColor: '#FF6D00',
  },
  
  statIconContainer: {
    marginRight: 12,
  },
  
  statIcon: {
    fontSize: 24,
  },
  
  statContent: {
    flex: 1,
  },
  
  statNumber: {
    fontSize: 22,
    fontWeight: 'bold',
    color: '#2C3E50',
    marginBottom: 2,
  },
  
  statLabel: {
    fontSize: 12,
    color: '#64748B',
  },
  
  lastUpdateText: {
    fontSize: 12,
    color: '#94A3B8',
    textAlign: 'center',
    marginTop: 10,
    fontStyle: 'italic',
  },
  
  section: {
    marginBottom: 32,
    backgroundColor: 'white',
    borderRadius: 16,
    padding: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 8,
    elevation: 3,
  },
  
  sectionTitle: {
    fontSize: 22,
    fontWeight: 'bold',
    color: '#4A6FFF',
    marginBottom: 20,
    letterSpacing: 0.3,
    paddingBottom: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#F0F2F5',
    display: 'flex',
    flexDirection: 'row',
    alignItems: 'center',
  },
  
  emptyListText: {
    color: '#94A3B8',
    fontStyle: 'italic',
    fontSize: 15,
    textAlign: 'center',
    padding: 16,
    backgroundColor: '#F8FAFC',
    borderRadius: 12,
    overflow: 'hidden',
    borderWidth: 1,
    borderColor: '#E2E8F0',
    borderStyle: 'dashed',
  },
  
  buttonGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
    gap: 16,
  },
  
  addButton: {
    backgroundColor: 'white',
    borderRadius: 16,
    padding: 20,
    alignItems: 'center',
    width: '30%',
    elevation: 4,
    shadowColor: '#4A6FFF',
    shadowOffset: { width: 0, height: 3 },
    shadowOpacity: 0.1,
    shadowRadius: 6,
    borderWidth: 1,
    borderColor: '#F0F2F5',
    borderLeftWidth: 4,
    borderLeftColor: '#4A6FFF',
  },
  
  addButtonStudent: {
    borderLeftColor: '#00C853',
  },
  
  addButtonParent: {
    borderLeftColor: '#FF6D00',
  },
  
  buttonIcon: {
    fontSize: 36,
    marginBottom: 12,
  },
  
  buttonText: {
    fontSize: 15,
    color: '#333',
    textAlign: 'center',
    fontWeight: '500',
  },
  
  // Listes d'utilisateurs
  userRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 14,
    paddingHorizontal: 16,
    backgroundColor: '#F8F9FC',
    marginBottom: 10,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#EAECF0',
  },
  
  userInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  
  userIcon: {
    fontSize: 24,
    marginRight: 12,
  },
  
  userDetails: {
    flex: 1,
  },
  
  userName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#2C3E50',
    marginBottom: 2,
  },
  
  userEmail: {
    fontSize: 14,
    color: '#64748B',
    marginBottom: 2,
  },
  
  userMeta: {
    fontSize: 13,
    color: '#94A3B8',
    fontStyle: 'italic',
  },
  
  deleteBtn: {
    backgroundColor: '#FF5252',
    paddingVertical: 8,
    paddingHorizontal: 14,
    borderRadius: 8,
    elevation: 2,
    shadowColor: '#FF5252',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 3,
    flexDirection: 'row',
    alignItems: 'center',
  },
  
  deleteBtnText: {
    color: 'white',
    fontSize: 14,
    fontWeight: '500',
    marginLeft: 4,
  },
  
  // Modal
  keyboardAvoidingView: {
    flex: 1,
  },
  
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.6)',
    justifyContent: 'center',
    alignItems: 'center',
    backdropFilter: 'blur(3px)',
  },
  
  modalContent: {
    backgroundColor: 'white',
    borderRadius: 20,
    padding: 24,
    width: '90%',
    maxWidth: 400,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 10 },
    shadowOpacity: 0.25,
    shadowRadius: 15,
    elevation: 15,
  },
  
  modalTitle: {
    fontSize: 22,
    fontWeight: 'bold',
    color: '#4A6FFF',
    marginBottom: 24,
    textAlign: 'center',
    letterSpacing: 0.5,
  },
  
  input: {
    borderWidth: 1,
    borderColor: '#E5E7EB',
    borderRadius: 12,
    padding: 14,
    marginBottom: 16,
    fontSize: 16,
    backgroundColor: '#F9FAFC',
  },
  
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 24,
  },
  
  modalButton: {
    flex: 1,
    padding: 14,
    borderRadius: 12,
    marginHorizontal: 8,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  
  modalButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
    letterSpacing: 0.3,
  },
  
  loader: {
    marginTop: 16,
  },
});
